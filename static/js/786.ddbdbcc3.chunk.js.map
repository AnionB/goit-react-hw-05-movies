{"version":3,"file":"static/js/786.ddbdbcc3.chunk.js","mappings":"4TAEMA,EAAM,mCACNC,EAAU,gCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,2FACCC,EADD,UACUF,EADV,sCAC+CD,GAD/C,kBAGEI,IAAAA,IAAUD,GAAKE,MAAK,SAAAC,GACzB,OAAOA,EAASC,KAAKC,QAAQC,KAAI,kBAA6B,CAC5DC,GAD+B,EAAGA,GAElCC,eAF+B,EAAOA,uBAJrC,kEAWA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAwBC,GAAxB,8EACCV,EADD,UACUF,EADV,gCACyCD,EADzC,2BAC+Da,EAD/D,iDAGET,IAAAA,IAAUD,GAAKE,MAAK,SAAAC,GACzB,OAAOA,EAASC,KAAKC,QAAQC,KAAI,kBAA6B,CAC5DC,GAD+B,EAAGA,GAElCC,eAF+B,EAAOA,uBAJrC,kEAWA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,8EACCZ,EADD,WACWF,EADX,iBAC2Bc,EAD3B,oBAC8Cf,EAD9C,qCAGEI,IAAAA,IAAUD,GAAKE,MAAK,SAAAC,GACzB,MAOIA,EAASC,KAEb,MAAO,CACLI,eAVF,EACEA,eAUAK,aAXF,EAEEA,aAUAC,SAZF,EAGEA,SAUAC,OAbF,EAIEA,OAUAC,YAdF,EAKEA,YAUAC,aAfF,EAMEA,kBAVC,kEAuBA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAwBN,GAAxB,8EACCZ,EADD,WACWF,EADX,iBAC2Bc,EAD3B,4BACsDf,EADtD,sCAGEI,IAAAA,IAAUD,GAAKE,MAAK,SAAAC,GACzB,OAAOA,EAASC,KAAKe,KAAKb,KAAI,kBAA4C,CACxEC,GAD4B,EAAGA,GAE/Ba,KAF4B,EAAOA,KAGnCC,UAH4B,EAAaA,UAIzCC,aAJ4B,EAAwBA,qBAJnD,kEAaA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAyBX,GAAzB,8EACCZ,EADD,WACWF,EADX,iBAC2Bc,EAD3B,4BACsDf,EADtD,sCAGEI,IAAAA,IAAUD,GAAKE,MAAK,SAAAC,GACzB,OAAOA,EAASC,KAAKC,QAAQC,KAAI,kBAA8B,CAC7DkB,OAD+B,EAAGA,OAElCC,QAF+B,EAAWA,QAG1ClB,GAH+B,EAAoBA,WAJlD,oE,2GC9DP,EAA6B,2B,SCyC7B,MApCA,WACE,OAAwCmB,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAgCC,EAAAA,EAAAA,YAAhC,eAAOC,EAAP,KAAiBC,EAAjB,KAYA,OAXAC,EAAAA,EAAAA,YAAU,WACRL,EAAaM,aACXxB,EAAAA,EAAAA,IAASkB,EAAaM,YAAY/B,KAAK6B,KACxC,CAACJ,KASF,iBAAKO,UAAWC,EAAhB,WACE,kBAAMC,SATV,SAAkBC,GAChBA,EAAEC,iBACFD,EAAEE,OAAO7B,MAAM8B,MAAMC,QACnBb,EAAgB,CAAElB,MAAO2B,EAAEE,OAAO7B,MAAM8B,QAC1CH,EAAEE,OAAO7B,MAAM8B,MAAQ,IAKrB,WACE,kBAAOE,KAAK,SAAStB,KAAM,WAC3B,kBAAOsB,KAAK,SAASF,MAAO,cAE7BV,IACEA,EAASa,OAAS,GACjB,wBACGb,EAASxB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,eAAP,OACZ,yBACE,SAAC,KAAD,CAAMoC,GAAE,kBAAarC,GAArB,SAA4BC,KADrBD,SAMb","sources":["components/FetchData/FetchData.js","webpack://goit-react-hw-05-movies/./src/components/Search/Search.module.css?06df","components/Search/Search.js"],"sourcesContent":["import axios from 'axios';\n\nconst key = '666fc90c25c7aa270f86bc901474e203';\nconst mainURL = 'https://api.themoviedb.org/3/';\n\nexport async function getPopularMovie() {\n  const url = `${mainURL}trending/movie/day?api_key=${key}`;\n\n  return axios.get(url).then(response => {\n    return response.data.results.map(({ id, original_title }) => ({\n      id,\n      original_title,\n    }));\n  });\n}\n\nexport async function getMovie(query) {\n  const url = `${mainURL}search/movie?api_key=${key}&language=en-US&${query}&page=1&include_adult=false`;\n\n  return axios.get(url).then(response => {\n    return response.data.results.map(({ id, original_title }) => ({\n      id,\n      original_title,\n    }));\n  });\n}\n\nexport async function getMovieInfo(movieId) {\n  const url = ` ${mainURL}movie/${movieId}?api_key=${key}&language=en-US`;\n\n  return axios.get(url).then(response => {\n    const {\n      original_title,\n      vote_average,\n      overview,\n      genres,\n      poster_path,\n      release_date,\n    } = response.data;\n\n    return {\n      original_title,\n      vote_average,\n      overview,\n      genres,\n      poster_path,\n      release_date,\n    };\n  });\n}\nexport async function getCasts(movieId) {\n  const url = ` ${mainURL}movie/${movieId}/credits?api_key=${key}&language=en-US `;\n\n  return axios.get(url).then(response => {\n    return response.data.cast.map(({ id, name, character, profile_path }) => ({\n      id,\n      name,\n      character,\n      profile_path,\n    }));\n  });\n}\n\nexport async function getReview(movieId) {\n  const url = ` ${mainURL}movie/${movieId}/reviews?api_key=${key}&language=en-US `;\n\n  return axios.get(url).then(response => {\n    return response.data.results.map(({ author, content, id }) => ({\n      author,\n      content,\n      id,\n    }));\n  });\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"searhThumb\":\"Search_searhThumb__3RJVA\"};","import React, { useState, useEffect } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\n\nimport { getMovie } from 'components/FetchData/FetchData';\nimport styles from './Search.module.css';\n\nfunction Search() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [filmList, setFilmList] = useState();\n  useEffect(() => {\n    searchParams.toString() &&\n      getMovie(searchParams.toString()).then(setFilmList);\n  }, [searchParams]);\n  function onSubmit(e) {\n    e.preventDefault();\n    e.target.query.value.trim() &&\n      setSearchParams({ query: e.target.query.value });\n    e.target.query.value = '';\n  }\n\n  return (\n    <div className={styles.searhThumb}>\n      <form onSubmit={onSubmit}>\n        <input type=\"search\" name={'query'} />\n        <input type=\"submit\" value={'Search'} />\n      </form>\n      {filmList &&\n        (filmList.length > 0 ? (\n          <ul>\n            {filmList.map(({ id, original_title }) => (\n              <li key={id}>\n                <Link to={`/movies/${id}`}>{original_title}</Link>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p>Такого фильма нет, попробуй еще раз</p>\n        ))}\n    </div>\n  );\n}\n\nexport default Search;\n"],"names":["key","mainURL","getPopularMovie","url","axios","then","response","data","results","map","id","original_title","getMovie","query","getMovieInfo","movieId","vote_average","overview","genres","poster_path","release_date","getCasts","cast","name","character","profile_path","getReview","author","content","useSearchParams","searchParams","setSearchParams","useState","filmList","setFilmList","useEffect","toString","className","styles","onSubmit","e","preventDefault","target","value","trim","type","length","to"],"sourceRoot":""}